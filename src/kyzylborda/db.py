from typing import Type, Any
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql.expression import text
from sqlalchemy import Column, Integer, Text, Boolean, DateTime, ForeignKey, UniqueConstraint, CheckConstraint
from sqlalchemy.orm import relationship
from sqlalchemy.dialects.postgresql import JSONB, UUID, ARRAY


Base = declarative_base()


class User(Base): # type: ignore
    __tablename__ = "users"

    id = Column(Integer, primary_key=True)
    # Account name (can be the same as email, used for password auth).
    login = Column(Text, nullable=False, unique=True)
    # Visible name.
    name = Column(Text, nullable=False, unique=True)
    # Auth by token.
    email = Column(Text, nullable=True, unique=True)
    token = Column(UUID(as_uuid=True), nullable=True, unique=True)
    # Auth by login and password (in plain text, these passwords are supposed to be generated by us, not by members).
    password = Column(Text, nullable=True)
    # It's unclear whether timestamp of user consent with privacy policy must be
    # stored by Russian law, but let's be on the safer side.
    signup_time = Column(DateTime, nullable=False, server_default=text("(now() at time zone 'utc')"))
    is_organizer = Column(Boolean, nullable=False, server_default=text("false"))
    is_disqualified = Column(Boolean, nullable=False, server_default=text("false"))
    tags = Column(ARRAY(Text), CheckConstraint("tags <> '{}'"), nullable=False, server_default="{default}")


class SubmittedFlag(Base): # type: ignore
    __tablename__ = "submitted_flags"
    __table_args__ = (UniqueConstraint("task_name", "submitter_id"),)

    id = Column(Integer, primary_key=True)
    task_name = Column(Text, nullable=False)
    flag = Column(Text, nullable=False)
    submitter_id = Column(Integer, ForeignKey("users.id", ondelete="CASCADE"), nullable=False)
    accept_time = Column(DateTime, nullable=False)


class GrantedHint(Base): # type: ignore
    __tablename__ = "granted_hints"
    __table_args__ = (UniqueConstraint("task_name", "hint_name", "requester_id"),)

    id = Column(Integer, primary_key=True)
    task_name = Column(Text, nullable=False)
    hint_name = Column(Text, nullable=False)
    requester_id = Column(Integer, ForeignKey("users.id", ondelete="CASCADE"), nullable=False)
    request_time = Column(DateTime, nullable=False)

    requester = relationship(User, lazy="raise")


class GeneratedTask(Base): # type: ignore
    __tablename__ = "generated_tasks"
    __table_args__ = (UniqueConstraint("task_name", "user_id"), UniqueConstraint("task_name", "random_seed"))

    id = Column(Integer, primary_key=True)
    task_name = Column(Text, nullable=False)
    # Null here means that the task has been pre-generated.
    user_id = Column(Integer, ForeignKey("users.id", ondelete="CASCADE"), nullable=True)
    random_seed = Column(UUID(as_uuid=True), nullable=False)
    # NULL means that the task is still being generated.
    substitutions = Column(JSONB, nullable=True)
    urls = Column(ARRAY(Text), nullable=True)
    bullets = Column(ARRAY(Text), nullable=True)

    user = relationship(User, lazy="raise")


class GeneratedFlag(Base): # type: ignore
    __tablename__ = "generated_flags"

    id = Column(Integer, primary_key=True)
    task_id = Column(Integer, ForeignKey("generated_tasks.id", ondelete="CASCADE"), nullable=False)
    flag = Column(Text, nullable=False, unique=True)

    task = relationship(GeneratedTask, lazy="raise")
